syntax = "proto3";

package services.provider.v1;

option csharp_namespace = "Trinsic.Services.Provider.V1";
option go_package = "services/provider/v1/provider";
option java_package = "trinsic.services.provider.v1";
option java_multiple_files = true;

import "services/account/v1/account.proto";
import "services/options/field-options.proto";
import "services/common/v1/common.proto";

import "services/google/api/annotations.proto";

// Details of an ecosystem
message Ecosystem {
  // URN of the ecosystem
  string id = 1;

  // Globally unique name for the ecosystem
  string name = 2;

  // Ecosystem description
  string description = 3;

  reserved 4, 5, 6, 7;
  reserved "uri", "webhooks", "display", "domain";
}

// Request to create an ecosystem
message CreateEcosystemRequest {
  // Globally unique name for the Ecosystem. This name will be
  // part of the ecosystem-specific URLs and namespaces.
  // Allowed characters are lowercase letters, numbers, underscore and hyphen.
  // If not passed, ecosystem name will be auto-generated.
  string name = 1 [(options.optional) = true];

  // Ecosystem description
  string description = 2 [(options.optional) = true];

  // The account details of the owner of the ecosystem
  services.account.v1.AccountDetails details = 4;

  // New domain URL
  string domain = 5;

  reserved 3;
  reserved "uri";
}

// Response to `CreateEcosystemRequest`
message CreateEcosystemResponse {
  // Details of the created ecosystem
  Ecosystem ecosystem = 1;
  // Account profile for auth of the owner of the ecosystem
  services.account.v1.AccountProfile profile = 2;
  // Indicates if confirmation of account is required.
  services.account.v1.ConfirmationMethod confirmation_method = 3;
}

// Request to fetch information about an ecosystem
message EcosystemInfoRequest {
}

// Response to `InfoRequest`
message EcosystemInfoResponse {
  // Ecosystem corresponding to current ecosystem in the account token
  Ecosystem ecosystem = 1;
}

// Request to fetch the Trinsic public key used
// to verify authentication token validity
message GetOberonKeyRequest {
}

// Response to `GetOberonKeyRequest`
message GetOberonKeyResponse {
  // Oberon Public Key as RAW base64-url encoded string
  string key = 1;
}

// Search for issuers/holders/verifiers
message SearchWalletConfigurationsRequest {
  // SQL filter to execute. `SELECT * FROM c WHERE [**queryFilter**]`
  string query_filter = 1;
  // Token provided by previous `SearchResponse`
  // if more data is available for query
  string continuation_token = 2 [(options.optional) = true];
}

message SearchWalletConfigurationResponse {
  // Results matching the search query
  repeated WalletConfiguration results = 1;
  // Whether more results are available for this query via `continuation_token`
  bool has_more_results = 2;
  // Token to fetch next set of results via `SearchRequest`
  string continuation_token = 4;
}

// Strongly typed information about wallet configurations
message WalletConfiguration {
  // Name/description of the wallet
  string name = 1;
  // Deprecated and will be removed on August 1, 2023 -- use external_identities.
  // This field is set to the first email address present in `external_identities`, if any.
  string email = 2  [(options.optional) = true, deprecated = true];
  // Deprecated -- use external_identities
  string sms = 3  [(options.optional) = true, deprecated = true];
  string wallet_id = 4;
  // The DID of the wallet
  string public_did = 5;
  string config_type = 6;

  // List of active authentication tokens for this wallet.
  // This list does not contain the issued token, only metadata
  // such as ID, description, and creation date.
  repeated services.account.v1.WalletAuthToken auth_tokens = 7;
  // List of external identity IDs (email addresses, phone numbers, etc.) associated with this wallet.
  // This is deprecated; use `external_identities` instead.
  repeated string external_identity_ids = 8 [deprecated=true];
  // Ecosystem in which this wallet is contained.
  string ecosystem_id = 9;
  string description = 10;

  // List of external identities associated with this wallet.
  repeated WalletExternalIdentity external_identities = 11;
}

// An external identity (email address, phone number, etc.) associated with a wallet for authentication purposes.
message WalletExternalIdentity {
  // The type of this identity (whether this identity is an email address, phone number, etc.)
  IdentityProvider provider = 1;

  // The actual email address/phone number/etc. for this identity
  string id = 2;
}

enum IdentityProvider {
  // Identity provider is unknown
  Unknown = 0;
  // Identity provider is email
  Email = 1;
  // Identity provider is phone
  Phone = 2;
}

// Options for creation of DID on the ION network
message IonOptions {
  enum IonNetwork {
    TestNet = 0;
    MainNet = 1;
  }

  // ION network on which DID should be published
  IonNetwork network = 1;
}

// Options for creation of DID on the SOV network
message IndyOptions {
  enum IndyNetwork {
    Danube = 0;
    SovrinBuilder = 1;
    SovrinStaging = 2;
    Sovrin = 3;
    IdUnionTest = 4;
    IdUnion = 5;
    IndicioTest = 6;
    IndicioDemo = 7;
    Indicio = 8;
  }

  // SOV network on which DID should be published
  IndyNetwork network = 1;
}

// Request to upgrade a wallet
message UpgradeDidRequest {
  oneof account {
    // Email address of account to upgrade.
    // Mutually exclusive with `walletId` and `didUri`.
    string email = 1;

    // Wallet ID of account to upgrade.
    // Mutually exclusive with `email` and `didUri`.
    string wallet_id = 2;

    // DID URI of the account to upgrade.
    // Mutually exclusive with `email` and `walletId`.
    string did_uri = 6;
  }

  // DID Method to which wallet should be upgraded
  services.common.v1.SupportedDidMethod method = 3;

  oneof options {
    // Configuration for creation of DID on ION network
    IonOptions ion_options = 4;
    // Configuration for creation of DID on INDY network
    IndyOptions indy_options = 5;
  }
}

// Response to `UpgradeDIDRequest`
message UpgradeDidResponse {
  // New DID of wallet
  string did = 1;
}

service Provider {
  // Create new ecosystem and assign the authenticated user as owner
  rpc CreateEcosystem(CreateEcosystemRequest) returns (CreateEcosystemResponse) {
    option (options.sdk_template_option).ignore = true;
    option (google.api.http) = {
      post: "/v1/provider/createecosystem"
      body: "*"
    };
  }

  // Returns the public key being used to create/verify oberon tokens
  rpc GetOberonKey(GetOberonKeyRequest) returns (GetOberonKeyResponse) {
    option (options.sdk_template_option).anonymous = true;
    option (options.sdk_template_option).no_arguments = true;
    option (google.api.http) = {
      post: "/v1/provider/getoberonkey"
      body: "*"
    };
  }

  // Upgrade a wallet's DID from `did:key` to another method
  rpc UpgradeDID(UpgradeDidRequest) returns (UpgradeDidResponse) {
    option (google.api.http) = {
      post: "/v1/provider/upgradedid"
      body: "*"
    };
  }

  // Search for issuers/providers/verifiers in the current ecosystem
  rpc SearchWalletConfigurations(SearchWalletConfigurationsRequest) returns (SearchWalletConfigurationResponse) {
    option (google.api.http) = {
      post: "/v1/provider/searchwalletconfigurations"
      body: "*"
    };
  }
}
