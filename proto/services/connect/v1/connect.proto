syntax = "proto3";
package services.connect.v1;

option csharp_namespace = "Trinsic.Services.Connect.V1";
option go_package = "services/connect/v1/connect";
option java_package = "trinsic.services.connect.v1";
option java_multiple_files = true;

import "services/common/v1/common.proto";
import "services/universal-wallet/v1/universal-wallet.proto";

import "services/google/api/annotations.proto";
import "services/options/field-options.proto";

// The type of verification to perform
enum VerificationType {
  // Government-issued ID (driver's license, passport, etc)
  GOVERNMENT_ID = 0;
}

message NormalizedGovernmentIdData {
  // The ID number of the underlying identity document
  optional string id_number = 1 [json_name = "idNumber"];

  // Given ("first") name of the document holder
  optional string given_name = 2 [json_name = "givenName"];

  // Family ("last") name of the document holder
  optional string family_name = 3 [json_name = "familyName"];

  // Full address of the document holder
  optional string address = 4 [json_name = "address"];

  // Date of birth of the document holder
  optional string date_of_birth = 5 [json_name = "dateOfBirth"];

  // ISO3 country code of the document
  optional string country = 6 [json_name = "country"];

  // Issuance date of the document
  optional string issue_date = 7 [json_name = "issueDate"];

  // Expiration date date of the document
  optional string expiration_date = 8 [json_name = "expirationDate"];
}

// Information about a Relying Party used for demo purposes
message DemoRelyingParty {
  string display_name = 1 [json_name = "displayName"];
  string logo_url = 2 [json_name = "logoUrl"];
  string primary_color = 3 [json_name = "primaryColor"];
}

// Request to create an Identity Verification Session
message CreateSessionRequest {
  // Array of verifications to perform
  repeated RequestedVerification verifications = 1;
  // Debugging information used to help diagnose issues
  map<string, string> debug_information = 2 [json_name = "debugInformation"];
  // Information about the Relying Party used for demo purposes.
  // This is only to be used if the demo flag is set to true in the debug information.
  optional DemoRelyingParty demo_rp = 3 [json_name = "demoRp"];
}

// A verification to perform in an IDV flow
message RequestedVerification {
  // The type of verification to perform
  VerificationType type = 1;

  oneof options {
    // Options for a Verification of type `GOVERNMENT_ID`
    GovernmentIDOptions government_id_options = 2;
  }
}

// Options for a Verification of type `GOVERNMENT_ID`
message GovernmentIDOptions {
  // The fields to retrieve from the Government ID.
  // If this object is not set, all fields will be retrieved.
  GovernmentIDFields fields = 1;
}

// Selection of fields to retrieve from a Government ID. All fields default to `false` unless explicitly set to `true`.
message GovernmentIDFields {
  // ID number of the underlying identity document
  bool id_number = 1;

  // Given ("first") name of the document holder
  bool given_name = 2;

  // Family ("last") name of the document holder
  bool family_name = 3;

  // Full address of the document holder
  bool address = 4;

  // Date of birth of the document holder
  bool date_of_birth = 5;

  // ISO3 country code of the document
  bool country = 6;

  // Issuance date of the document
  bool issue_date = 7;

  // Expiration date date of the document
  bool expiration_date = 8;

  // The image of the front of the document
  bool document_front = 9;

  // The image of the back of the document
  bool document_back = 10;

  // The image of the holder portrait contained in the document
  bool document_portrait = 11;

  // The image of the face match selfie
  bool selfie = 12;
}

message CredentialRequestData {
  // The type of verification for which the credential can be used
  VerificationType type = 1;
  // Name of the IDV issuer
}

// Controls how sessions are ordered in `ListSessions`
enum SessionOrdering {
  // Order sessions according to when they were created
  CREATED = 0;

  // Order sessions according to when they last changed state
  UPDATED = 1;

  // Order sessions according to their numerical state
  STATE = 2;
}
